* A shiro-based login page

This is a webapp that offers two URLs for use by the [[http://nginx.org/en/docs/http/ngx_http_auth_request_module.html][NGINX auth_request module]]:
 - /auth which will just check the login state of Apache Shiro, returning the status code 401 for failure and 200 for success
 - /login which contains a login form and will authenticate against Apache Shiro

The webapp is implemented as two servlets exposed as OSGi services, that will be picked up by the [[http://ops4j.github.io/pax/web/4.x/index.html#_whiteboard_extender][pax web whiteboard extender]].

** Status of the project

[[https://travis-ci.org/steinarb/authservice][file:https://travis-ci.org/steinarb/authservice.svg?branch=master]] [[https://coveralls.io/r/steinarb/authservice][file:https://coveralls.io/repos/steinarb/authservice/badge.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.osgi.service%3Aosgi.service][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=alert_status#.svg]] [[https://maven-badges.herokuapp.com/maven-central/no.priv.bang.authservice/authservice][file:https://maven-badges.herokuapp.com/maven-central/no.priv.bang.authservice/authservice/badge.svg]] [[https://www.javadoc.io/doc/no.priv.bang.authservice/authservice][file:https://www.javadoc.io/badge/no.priv.bang.authservice/authservice.svg]]

*** SonarCloud

[[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=ncloc#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=bugs#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=vulnerabilities#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=code_smells#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=coverage#.svg]]

* Installing on karaf
/Note/: The instructions here don't describe a production enviroment, but they describe setting up something that will let the service be startet.

The webapp needs PostgreSQL running, with a database named "ukelonn" containing the table users, and a no-password authentication scheme.

Instructions:
 1. In bash, clone and build the authservice app:
    #+BEGIN_EXAMPLE
      mkdir -p ~/git/
      cd ~/git/
      git clone https://github.com/steinarb/authservice.git
      cd ~/git/authservice/
      mvn clean install
    #+END_EXAMPLE
 2. [[http://karaf.apache.org/download.html][Download the current version of apache karaf (currently karaf 4.1.1), unpack and start apache karaf]]
 3. In the karaf shell, install the authservice feature repository
    #+BEGIN_EXAMPLE
      feature:repo-add mvn:no.priv.bang.authservice/authservice.bundle/LATEST/xml/features
    #+END_EXAMPLE
 4. In the karaf shell, install the authservice featire
    #+BEGIN_EXAMPLE
      feature:install authservice
    #+END_EXAMPLE
 5. Open a browser on the URL http://localhost:8181/login and do a login with a valid username/password combination from the users table in the PostgreSQL database named "ukelonn"
 6. Open a browser on the URL http://localhost:8181/auth and verify that it doesn't return a 401 HTTP code

* Installing and configuring nginx

Instructions:
 1. Install nginx with the auth module.  On debian this is done with the command
    #+BEGIN_EXAMPLE
      apt-get update
      apt-get install nginx-extras
    #+END_EXAMPLE
 2. Add the following to the /etc/nginx/sites-available/default (adapt this to the actual server/site in use):
    #+BEGIN_SRC conf
      server {
              listen 80 default_server;
              listen [::]:80 default_server;

              root /var/www/html;

              # Add index.php to the list if you are using PHP
              index index.html index.htm index.nginx-debian.html;

              server_name _;

              location /authservice {
                      proxy_pass http://localhost:8181/authservice;
                      proxy_cookie_path ~^/authservice.*$ /;
              }

              location /authservice/login {
                      auth_request off;
                      proxy_pass http://localhost:8181/authservice/login;
                      proxy_cookie_path ~^/authservice.*$ /;
              }

              location / {
                      # First attempt to serve request as file, then
                      # as directory, then fall back to displaying a 404.
                      try_files $uri $uri/ =404;
              }

              # Auth configuration
              auth_request /authservice/check;
              error_page 401 = @error401;
      }
    #+END_SRC
* License

This software is licensed under Apache Public License v 2.0.

See the LICENSE file for the full details.
